version: '3.9'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: automarket_postgres
    environment:
      POSTGRES_DB: automarket_db
      POSTGRES_USER: automarket_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-automarket_pass}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automarket_user -d automarket_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automarket_network
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: automarket_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-automarket_redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automarket_network
    restart: unless-stopped

  # Message Broker RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: automarket_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-automarket}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-automarket_pass}
      RABBITMQ_DEFAULT_VHOST: automarket
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automarket_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: automarket_backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://automarket_user:${DB_PASSWORD:-automarket_pass}@postgres:5432/automarket_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-automarket_redis}@redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-automarket}:${RABBITMQ_PASS:-automarket_pass}@rabbitmq:5672/automarket
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRY: ${JWT_EXPIRY:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - upload_data:/app/uploads
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - automarket_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000/api}
    container_name: automarket_frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000/api}
      REACT_APP_WEBSOCKET_URL: ${REACT_APP_WEBSOCKET_URL:-ws://localhost:3000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - automarket_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: automarket_nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - automarket_network
    restart: unless-stopped

  # Elasticsearch para búsqueda avanzada
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: automarket_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - automarket_network
    restart: unless-stopped

  # Kibana para visualización de logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: automarket_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - automarket_network
    restart: unless-stopped

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: automarket_prometheus
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - automarket_network
    restart: unless-stopped

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: automarket_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - automarket_network
    restart: unless-stopped

  # Jaeger para distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: automarket_jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - automarket_network
    restart: unless-stopped

  # MinIO para almacenamiento de objetos (imágenes de vehículos)
  minio:
    image: minio/minio:latest
    container_name: automarket_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-automarket}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-automarket_pass}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"    # API
      - "9001:9001"    # Console
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - automarket_network
    restart: unless-stopped

  # Mailhog para testing de emails
  mailhog:
    image: mailhog/mailhog:latest
    container_name: automarket_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - automarket_network
    restart: unless-stopped

networks:
  automarket_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
  upload_data:
    driver: local
  nginx_logs:
    driver: local
