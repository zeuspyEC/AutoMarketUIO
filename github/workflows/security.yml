name: Security Scanning

on:
  schedule:
    # Ejecutar todos los días a las 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Análisis de código con CodeQL
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Escaneo de dependencias
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AutoMarket-Quito-Security'
        path: '.'
        format: 'SARIF'
        args: >
          --enableRetired
          --enableExperimental

    - name: Upload OWASP results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif

  # Escaneo de secretos
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

    - name: Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Escaneo de contenedores
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Build imágenes para escaneo
      run: |
        docker build -t automarket-backend:scan ./backend
        docker build -t automarket-frontend:scan ./frontend

    - name: Run Trivy scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'automarket-backend:scan'
        format: 'sarif'
        output: 'trivy-backend.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'automarket-frontend:scan'
        format: 'sarif'
        output: 'trivy-frontend.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-backend.sarif
          trivy-frontend.sarif

    - name: Grype Container Scan
      uses: anchore/scan-action@v3
      with:
        image: 'automarket-backend:scan'
        fail-build: false
        severity-cutoff: high

  # Análisis de infraestructura como código
  iac-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Checkov scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: all
        output_format: sarif
        output_file_path: reports/checkov.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/checkov.sarif

    - name: Terrascan
      uses: accurics/terrascan-action@main
      with:
        iac_type: 'k8s,docker'
        iac_version: 'v14'
        policy_type: 'all'
        only_warn: false

  # SAST - Static Application Security Testing
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/nodejs
          p/typescript
          p/react

    - name: NodeJsScan
      uses: ajinabraham/njsscan-action@master
      with:
        args: '. --sarif --output results.sarif || true'

    - name: Upload SAST results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: results.sarif

  # Compliance y mejores prácticas
  compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://staging.automarket-quito.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Security Headers Check
      run: |
        npm install -g securityheaders-cli
        securityheaders https://staging.automarket-quito.com

    - name: SSL/TLS Configuration Check
      run: |
        docker run --rm drwetter/testssl.sh https://staging.automarket-quito.com

  # Generación de reporte de seguridad
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, container-scan, iac-scan, sast, compliance]
    if: always()
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate consolidated report
      run: |
        echo "# Security Scan Report - $(date)" > security-report.md
        echo "## Summary" >> security-report.md
        echo "- CodeQL: ${{ needs.codeql.result }}" >> security-report.md
        echo "- Dependencies: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Secrets: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- Containers: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- IaC: ${{ needs.iac-scan.result }}" >> security-report.md
        echo "- SAST: ${{ needs.sast.result }}" >> security-report.md
        echo "- Compliance: ${{ needs.compliance.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

    - name: Send notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "⚠️ Security vulnerabilities detected in AutoMarket Quito",
            attachments: [{
              color: 'danger',
              text: 'Please review the security scan results immediately'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
